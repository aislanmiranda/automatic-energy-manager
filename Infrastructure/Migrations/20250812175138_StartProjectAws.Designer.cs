// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250812175138_StartProjectAws")]
    partial class StartProjectAws
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0)
                        .HasComment("Chave para o cliente");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Address")
                        .HasColumnOrder(6)
                        .HasComment("Logradouro para localização o cliente");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("City")
                        .HasColumnOrder(8)
                        .HasComment("Cidade para localização o cliente");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Complement")
                        .HasColumnOrder(10)
                        .HasComment("Complemento para localização o cliente");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(14)
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'America/Sao_Paulo'")
                        .HasComment("Data de criação no fuso horário do Brasil");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("varchar")
                        .HasColumnName("Document")
                        .HasColumnOrder(3)
                        .HasComment("Documento para identificar o cliente 000.000.000-00 | 00.000.000/0000-00");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Email")
                        .HasColumnOrder(4)
                        .HasComment("Email para identificar o cliente");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("Nome para identificar o cliente");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Neighborhood")
                        .HasColumnOrder(9)
                        .HasComment("Bairro para localização o cliente");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("varchar")
                        .HasColumnName("Phone")
                        .HasColumnOrder(5)
                        .HasComment("Phone para identificar o cliente (00) 99999-9999 | (00) 9999-9999");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("varchar")
                        .HasColumnName("Estado")
                        .HasColumnOrder(7)
                        .HasComment("Estado para localização o cliente");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TypeCustomer")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar")
                        .HasColumnName("TypeCustomer")
                        .HasColumnOrder(1)
                        .HasComment("Tipo do Usuário [PJ|PF]");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9)
                        .HasColumnType("varchar")
                        .HasColumnName("ZipCode")
                        .HasColumnOrder(11)
                        .HasComment("Cep para localização o cliente 29000-000");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.HasIndex("Document")
                        .IsUnique()
                        .HasDatabaseName("idx_document_unique");

                    b.ToTable("Customer", "domain");
                });

            modelBuilder.Entity("Domain.Entities.Equipament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0)
                        .HasComment("Id do equipamento");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<short>("Port")
                        .HasMaxLength(30)
                        .HasColumnType("smallint")
                        .HasColumnName("Port")
                        .HasColumnOrder(3)
                        .HasComment("Para indicar a porta na qual o equipamento será acionado");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("Queue")
                        .HasColumnOrder(2)
                        .HasComment("Indica a fila que o equipamento escuta");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Tag")
                        .HasColumnOrder(1)
                        .HasComment("Tag para identificar do equipamento");

                    b.HasKey("Id")
                        .HasName("pk_equipament");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("idx_customerid");

                    b.HasIndex("Tag", "Port")
                        .IsUnique()
                        .HasDatabaseName("idx_tagcust_unique");

                    b.ToTable("Equipament", "domain");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0)
                        .HasComment("Chave para identificar a tarefa");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("Action")
                        .HasColumnOrder(2)
                        .HasComment("Ação para identificar comportamento da placa");

                    b.Property<Guid>("EquipamentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("Expression")
                        .HasColumnOrder(4)
                        .HasComment("Expressão cron para a programação");

                    b.Property<string>("TaskJobId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("TaskJobId")
                        .HasColumnOrder(5)
                        .HasComment("Identificação da task cadastrada");

                    b.Property<string>("TaskLegend")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("TaskName")
                        .HasColumnOrder(1)
                        .HasComment("Nome para identificar nome tarefa");

                    b.HasKey("Id")
                        .HasName("pk_task");

                    b.HasIndex("EquipamentId");

                    b.HasIndex("Action", "Expression", "EquipamentId")
                        .IsUnique()
                        .HasDatabaseName("idx_task_unique");

                    b.ToTable("Task", "domain");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(0)
                        .HasComment("Chave para o usuário");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedAt")
                        .HasColumnOrder(5)
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'America/Sao_Paulo'")
                        .HasComment("Data de criação no fuso horário do Brasil");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Description")
                        .HasColumnOrder(3)
                        .HasComment("Description para identificar o usuário");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar")
                        .HasColumnName("Login")
                        .HasColumnOrder(1)
                        .HasComment("Login para identificar o usuário");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar")
                        .HasColumnName("Password")
                        .HasColumnOrder(2)
                        .HasComment("Password para altenticar o usuário");

                    b.Property<short>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)2)
                        .HasColumnName("Status")
                        .HasColumnOrder(4)
                        .HasComment("Status 0-Inativo 1-Ativo 2-EmAnalise");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("User", "security");
                });

            modelBuilder.Entity("Domain.Entities.UserCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_usercustomer");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserCustomer", "domain");
                });

            modelBuilder.Entity("Domain.Entities.Equipament", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Equipaments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.ScheduleTask", b =>
                {
                    b.HasOne("Domain.Entities.Equipament", "Equipament")
                        .WithMany("Tasks")
                        .HasForeignKey("EquipamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equip_task");

                    b.Navigation("Equipament");
                });

            modelBuilder.Entity("Domain.Entities.UserCustomer", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithOne("UserCustomer")
                        .HasForeignKey("Domain.Entities.UserCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_customer_usercustomer");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("UserCustomer")
                        .HasForeignKey("Domain.Entities.UserCustomer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_usercustomer");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Equipaments");

                    b.Navigation("UserCustomer");
                });

            modelBuilder.Entity("Domain.Entities.Equipament", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserCustomer");
                });
#pragma warning restore 612, 618
        }
    }
}
